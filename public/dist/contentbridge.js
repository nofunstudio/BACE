(()=>{"use strict";var e={761:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getObjectByUUID=t.cssStringToHexNumber=t.hexNumberToCSSString=t.getEntityName=t.isUUID=void 0;const s=/^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}$/;t.isUUID=e=>"string"==typeof e&&s.test(e),t.getEntityName=e=>e.name||e.baseType,t.hexNumberToCSSString=e=>`#${("000000"+e.toString(16)).slice(-6)}`,t.cssStringToHexNumber=e=>+`0x${e.substr(1)}`,t.getObjectByUUID=(e,s)=>{if(e.uuid===s)return e;if(!e.children||!e.children.length)return null;for(let i of e.children){let e=(0,t.getObjectByUUID)(i,s);if(e)return e}}}},t={};function s(i){var n=t[i];if(void 0!==n)return n.exports;var r=t[i]={exports:{}};return e[i](r,r.exports,s),r.exports}(()=>{s(761);class e extends EventTarget{constructor(){super(),this.db=new Map,this.overviews=new Map,this.sceneGraphs=new Map,this.renderers=new Map,this.renderingInfo=new Map,this.port=chrome.runtime.connect({name:"r3f-devtools"}),this.port.postMessage({name:"connect",tabId:chrome.devtools.inspectedWindow.tabId}),this.port.onDisconnect.addListener((e=>{console.error("disconnected from background",e)})),this.port.onMessage.addListener((e=>{this.onMessage(e),console.log(e)})),document.addEventListener("keydown",(e=>{e.key}),{passive:!0})}reload(){chrome.devtools.inspectedWindow.reload({})}getEntity(e){return e?/renderer/.test(e)?this.renderers.get(e):this.db.get(e):{uuid:e}}getEntityandDependencies(e){const t={},s=[e];for(;s.length;){const e=s.shift();if(e){const i=this.getEntity(e);if(i&&e&&!t[e]){t[e]=i;for(let e of Object.values(i))(0,utils_1.isUUID)(e)&&s.push(e)}}}return t}getRenderingInfo(e){return this.renderingInfo.get(e)}getResourcesOverview(e){return this.overviews.get(e)}getSceneGraph(e){return this.sceneGraphs.get(e)}updateProperty(e,t,s,i){const n=this.getEntity(e);this.dispatchToContent("entity-update",{uuid:e,property:t,value:s,dataType:i}),n[t]=s,this.update(n)}requestEntity(e){this.dispatchToContent("_request-entity",{uuid:e})}requestOverview(e){this.dispatchToContent("_request-overview",{type:e})}requestSceneGraph(e){this.dispatchToContent("_request-scene-graph",{uuid:e})}requestRenderingInfo(e){this.dispatchToContent("_request-rendering-info",{uuid:e})}select(e){e&&this.dispatchToContent("select",{uuid:e})}onMessage(e){const{id:t,type:s,data:i}=e;switch(s){case"error":this.dispatchEvent(new CustomEvent("error",{detail:i}));break;case"register":this.revision=i.revision,this.eval(`console.log("r3f-devtools: debugging three.js r${this.revision}")`);break;case"committed":this.db.clear(),this.overviews.clear(),this.sceneGraphs.clear(),this.renderers.clear(),this.renderingInfo.clear(),chrome.runtime.getURL("/dist/injection.js"),this.dispatchEvent(new CustomEvent("devtools-ready"));break;case"observe":this.dispatchEvent(new CustomEvent("observe",{detail:{uuids:i.uuids}}));break;case"scene-graph":this.sceneGraphs.set(i.uuid,i.graph),this.dispatchEvent(new CustomEvent("scene-graph-update",{detail:{uuid:i.uuid,graph:i.graph}}));break;case"overview":this.overviews.set(i.type,i.entities),this.dispatchEvent(new CustomEvent("overview-update",{detail:{type:i.type,entities:i.entities}}));break;case"rendering-info":this.dispatchEvent(new CustomEvent("rendering-info-update",{detail:i})),this.renderingInfo.set(i.uuid,i);break;case"entity":if("renderer"===i.type)this.renderers.set(i.uuid,i),this.dispatchEvent(new CustomEvent("renderer-update",{detail:{renderer:i,uuid:i.uuid}}));else if(Array.isArray(i))for(let e of i)this.update(e)}}update(e){this.db.set(e.uuid,e),this.dispatchEvent(new CustomEvent("entity-update",{detail:{entity:e,uuid:e.uuid}}))}dispatchToContent(e,t){this.eval(`__R3F_DEVTOOLS__.dispatchEvent(new CustomEvent('${e}', {\n      detail: ${JSON.stringify(t)},\n    }));`)}eval(e){const[t,s]=chrome.devtools.inspectedWindow.eval(e);return s&&console.warn(s),t}}})()})();